"0",""
"0",""
"0","takahashi_lines <- interlinear_full_lines[interlinear_full_lines$transcriber == 'H',]"
"0","takahashi_lines$line <- gsub('[\\!\\% ]', '', takahashi_lines$line)"
"0",""
"0",""
"0","line_lengths <- c() # Length of each line of the Takahashi transcription"
"0","line_code <- c() # The numeric code of the line: '-' (line end), '-' (par end), '.' (circular text)"
"0",""
"0",""
"0","for (l in takahashi_lines$line) {"
"0","  "
"0",""
"0","  line_lengths <- c(line_lengths, length(unlist(strsplit(l, ""[\\.,-]""))))"
"0","  "
"0","  code <- str_extract(l, '.$') # Make the code the last character of the string, unless there's a '-' and then a '.' "
"0","  if ((code == '.')&(grepl('-', l))) {"
"0","    code <- '-'"
"0","  }"
"0","  "
"0","  "
"0","  line_code <- c(line_code, code)"
"0",""
"0","  #line_code <- c(line_code, str_extract(l, '([-=])|(\\.$)'))"
"0","  "
"0","}"
"0",""
"0",""
"0",""
"0",""
"0","# Types of lines: 'line, 'init', 'fin', 'init-fin' (single line pars), and 'circ' (circular text)"
"0","line_types <- c('init')"
"0",""
"0","for (i in 2:length(takahashi_lines$line)) {"
"0","  "
"0","  line_type <- NULL"
"0","  "
"0","  "
"0","  # Circular Line Codes"
"0","  if ((line_code[i] == '.')|(line_code[i] == '{blot}')) {"
"0","    line_type <- 'circ'"
"0","    "
"0","  } "
"0",""
"0","  # Paragraph-ending Line Codes"
"0","  if (line_code[i] == '=') {"
"0","    "
"0","    if (line_code[i-1] %in% c('.', '=')) {"
"0","      "
"0","      line_type <- 'init-fin'"
"0","      "
"0","    } else {"
"0","      "
"0","      line_type <- 'fin'"
"0","      "
"0","    }"
"0","    "
"0","    "
"0","  }"
"0","  "
"0","  # Regular Line Codes"
"0","  if (line_code[i] == '-') {"
"0","    "
"0","    if (line_code[i-1] %in% c('.', '=')) {"
"0","  "
"0","      "
"0","      if (line_code[i+1] == '.') {"
"0","        "
"0","        line_type <- 'init-fin'"
"0","        "
"0","      } else {"
"0","        "
"0","        line_type <- 'init'"
"0","      }"
"0","      "
"0","      "
"0","    } else {"
"0",""
"0","      if (line_code[i+1] == '.') {"
"0","        "
"0","        line_type <- 'fin'"
"0","        "
"0","      } else {"
"0","        "
"0","        line_type <- 'line'"
"0","      }"
"0",""
"0","    }"
"0","  }"
"0","  "
"0","  "
"0","  line_types <- c(line_types, line_type)"
"0","}"
"0",""
"0",""
"0",""
"0","par_initial_nums <- c()"
"0",""
"0","for (i in 1:length(line_types)) {"
"0","  "
"0","  par_num <- NA"
"0",""
"0","  if (line_types[i] == 'circ') {"
"0","    "
"0","    par_num <- NA"
"0","    "
"0","  }"
"0","  "
"0","  if (line_types[i] %in% c('init', 'init-fin')) {"
"0","    "
"0","    par_num <- 0"
"0","    "
"0","  }"
"0","  "
"0","  if (line_types[i] %in% c('line', 'fin')) {"
"0","    "
"0","    par_num <- line_lengths[i-1] + tail(par_initial_nums, 1)"
"0","    "
"0","  }  "
"0","  "
"0","  par_initial_nums <- c(par_initial_nums, par_num)"
"0",""
"0","}"
"0",""
"0",""
"0",""
"0","# Paragraph final requires moving backwards through the list, so reverse everything"
"0","r_line_types <- rev(line_types)"
"0","r_line_lengths <- rev(line_lengths)"
"0",""
"0","r_par_final_nums <- c()"
"0",""
"0","for (i in 1:length(line_types)) {"
"0","  "
"0","  par_num <- NA"
"0","  "
"0","  if (r_line_types[i] == 'circ') {"
"0","    "
"0","    par_num <- NA"
"0","    "
"0","  }"
"0","  "
"0","  "
"0","  if (r_line_types[i] %in% c('fin', 'init-fin')) {"
"0","    "
"0","    par_num <- 0"
"0","    "
"0","  }"
"0","  "
"0","  if (r_line_types[i] %in% c('line', 'init')) {"
"0","    "
"0","    par_num <- r_line_lengths[i-1] + tail(r_par_final_nums, 1)"
"0","    "
"0","  } "
"0","  "
"0","  r_par_final_nums <- c(r_par_final_nums, par_num)"
"0",""
"0","}"
"0",""
"0","par_final_nums <- rev(r_par_final_nums)"
"0",""
"0",""
"0",""
"0",""
"0","# Add the paragraph information into the interlinear line dataframe (but only for the Takahashi transcription)"
"0",""
"0","# Fill out the cols with NAs"
"0","interlinear_full_lines$par_init <- rep(NA, length(interlinear_full_lines$line)) "
"0","interlinear_full_lines$par_fin <- rep(NA, length(interlinear_full_lines$line))"
"0",""
"0","# Add the info into the Takahashi lines"
"0","interlinear_full_lines$par_init[interlinear_full_lines$transcriber == 'H'] <- par_initial_nums"
"2","Warnung: number of items to replace is not a multiple of replacement length"
"0","interlinear_full_lines$par_fin[interlinear_full_lines$transcriber == 'H'] <- par_final_nums"
"2","Warnung: number of items to replace is not a multiple of replacement length"
"0","# Write the file"
"0",""
"0","write.table(interlinear_full_lines, file = ""Voynich_texts/interlinear_full_lines.txt"", sep = ""\t"", row.names=FALSE)"
"0",""
"0",""
"0",""
